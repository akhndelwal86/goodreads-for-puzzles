'use client'

import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Clock, Users, Star, Heart, Plus, ChevronDown, BookOpen, Check, Eye } from 'lucide-react'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu'
import Image from 'next/image'
import Link from 'next/link'
import { useState, useEffect } from 'react'
import { useUser } from '@clerk/nextjs'

interface PuzzleOfTheDay {
  id: string
  title: string
  brand: string
  pieces: number
  difficulty: string
  image: string
  description: string | null
  avgTime: string
  rating: number
  ratingCount: number
  completions: number
  wantsToSolve: number
  tags: string[]
  inStock: boolean
}

interface PuzzleStatus {
  hasLog: boolean
  status?: string
}

export function PuzzleOfTheDay() {
  const { user } = useUser()
  const [puzzleOfTheDay, setPuzzleOfTheDay] = useState<PuzzleOfTheDay | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [puzzleStatus, setPuzzleStatus] = useState<PuzzleStatus>({ hasLog: false })
  const [isUpdating, setIsUpdating] = useState(false)

  useEffect(() => {
    const fetchPuzzleOfTheDay = async () => {
      try {
        const response = await fetch('/api/puzzle-of-the-day', {
          cache: 'no-store',
          headers: {
            'Cache-Control': 'no-cache'
          }
        })
        
        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`)
        }
        
        const data = await response.json()
        
        if (data.error) {
          throw new Error(data.message || 'API returned error')
        }
        
        setPuzzleOfTheDay(data)
        setIsLoading(false)
        
      } catch (err) {
        console.error('Error fetching puzzle of the day:', err)
        setError(err instanceof Error ? err.message : 'Unknown error')
        setIsLoading(false)
      }
    }

    fetchPuzzleOfTheDay()
  }, [])

  useEffect(() => {
    if (user && puzzleOfTheDay) {
      checkPuzzleStatus()
    }
  }, [user, puzzleOfTheDay])

  const checkPuzzleStatus = async () => {
    if (!user || !puzzleOfTheDay) return
    
    try {
      const response = await fetch(`/api/puzzle-logs/check?puzzleId=${puzzleOfTheDay.id}`)
      if (response.ok) {
        const data = await response.json()
        setPuzzleStatus({
          hasLog: data.hasLog,
          status: data.status
        })
      }
    } catch (error) {
      console.error('Error checking puzzle status:', error)
      setPuzzleStatus({ hasLog: false })
    }
  }

  const handleStatusChange = async (newStatus: string) => {
    if (!puzzleOfTheDay) return
    
    setIsUpdating(true)
    
    try {
      const response = await fetch('/api/puzzle-status', {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          puzzleId: puzzleOfTheDay.id,
          newStatus,
        }),
      })

      if (response.ok) {
        setPuzzleStatus({
          hasLog: true,
          status: newStatus
        })
      } else {
        console.error('Failed to update puzzle status')
      }
    } catch (error) {
      console.error('Error updating puzzle status:', error)
    } finally {
      setIsUpdating(false)
    }
  }

  const getStatusInfo = (status?: string) => {
    switch (status) {
      case 'wishlist':
        return { icon: Heart, label: 'Wishlisted', color: 'text-pink-600' }
      case 'library':
        return { icon: BookOpen, label: 'In Library', color: 'text-blue-600' }
      case 'in-progress':
        return { icon: Clock, label: 'Solving', color: 'text-amber-600' }
      case 'completed':
        return { icon: Check, label: 'Completed', color: 'text-emerald-600' }
      default:
        return null
    }
  }

  if (isLoading) {
    return (
      <section>
        <div className="flex items-center gap-3 mb-4">
          <div className="w-6 h-6 bg-orange-500 rounded-full flex items-center justify-center">
            <Star className="w-4 h-4 text-white" />
          </div>
          <h2 className="text-xl font-semibold text-gray-900">Puzzle of the Day</h2>
        </div>
        
        <div className="bg-white/90 backdrop-blur-sm rounded-3xl shadow-lg overflow-hidden">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-0">
            <div className="relative aspect-[4/3] lg:aspect-[3/2] bg-gray-200 animate-pulse" />
            <div className="p-6 space-y-4">
              <div className="h-6 bg-gray-200 rounded animate-pulse" />
              <div className="h-4 bg-gray-200 rounded animate-pulse w-3/4" />
              <div className="h-4 bg-gray-200 rounded animate-pulse w-1/2" />
            </div>
          </div>
        </div>
      </section>
    )
  }

  if (error) {
    return (
      <section>
        <div className="flex items-center gap-3 mb-4">
          <div className="w-6 h-6 bg-orange-500 rounded-full flex items-center justify-center">
            <Star className="w-4 h-4 text-white" />
          </div>
          <h2 className="text-xl font-semibold text-gray-900">Puzzle of the Day</h2>
        </div>
        
        <div className="bg-white/90 backdrop-blur-sm rounded-3xl shadow-lg overflow-hidden">
          <div className="p-6 text-center">
            <p className="text-gray-600 mb-4">Unable to load today's featured puzzle</p>
            <p className="text-xs text-gray-500 mb-4">{error}</p>
            <Button 
              onClick={() => window.location.reload()} 
              variant="outline" 
              className="border-gray-200 text-gray-700 hover:bg-gray-50"
            >
              Try Again
            </Button>
          </div>
        </div>
      </section>
    )
  }

  if (!puzzleOfTheDay) {
    return (
      <section>
        <div className="flex items-center gap-3 mb-4">
          <div className="w-6 h-6 bg-orange-500 rounded-full flex items-center justify-center">
            <Star className="w-4 h-4 text-white" />
          </div>
          <h2 className="text-xl font-semibold text-gray-900">Puzzle of the Day</h2>
        </div>
        
        <div className="bg-white/90 backdrop-blur-sm rounded-3xl shadow-lg overflow-hidden">
          <div className="text-center p-6">
            <p className="text-gray-600">No puzzle data available</p>
          </div>
        </div>
      </section>
    )
  }

  return (
    <section>
      {/* Section Header - Outside the card */}
      <div className="flex items-center gap-3 mb-4">
        <div className="w-6 h-6 bg-orange-500 rounded-full flex items-center justify-center">
          <Star className="w-4 h-4 text-white" />
        </div>
        <h2 className="text-xl font-semibold text-gray-900">Puzzle of the Day</h2>
      </div>

      {/* White Card with Puzzle Content */}
      <div className="bg-white/90 backdrop-blur-sm rounded-3xl shadow-lg hover:shadow-xl transition-all duration-300 overflow-hidden">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-0">
          {/* Image Section */}
          <div className="relative aspect-[4/3] lg:aspect-[3/2]">
            <Image
              src={puzzleOfTheDay.image}
              alt={puzzleOfTheDay.title}
              fill
              className="object-cover"
              priority
            />
            {/* Overlay Badge */}
            <div className="absolute top-4 left-4">
              <Badge className="bg-orange-500 text-white border-0 text-sm font-medium">
                Puzzle of the Day
              </Badge>
            </div>
          </div>

          {/* Content Section */}
          <div className="p-6">
            {/* Header Info */}
            <div className="mb-4">
              <div className="flex items-center gap-3 mb-3">
                <Badge variant="outline" className="bg-purple-100 text-purple-700 border-purple-200">
                  {puzzleOfTheDay.difficulty}
                </Badge>
                <span className="text-gray-600 text-sm">{puzzleOfTheDay.pieces} pieces</span>
              </div>
              
              <h3 className="text-2xl font-bold text-gray-900 mb-2">
                {puzzleOfTheDay.title}
              </h3>
              
              <p className="text-gray-600 mb-4">
                by {puzzleOfTheDay.brand}
              </p>
              
              {puzzleOfTheDay.description && (
                <p className="text-gray-600 text-sm leading-relaxed mb-6">
                  {puzzleOfTheDay.description}
                </p>
              )}
            </div>

            {/* Stats Row - 4 Key Data Points */}
            <div className="grid grid-cols-2 gap-4 mb-6">
              <div className="flex items-center gap-2">
                <Star className="w-4 h-4 text-orange-500" />
                <span className="text-gray-600 text-sm">
                  {puzzleOfTheDay.rating > 0 ? `${puzzleOfTheDay.rating.toFixed(1)} (${puzzleOfTheDay.ratingCount})` : 'No rating'}
                </span>
              </div>
              
              <div className="flex items-center gap-2">
                <Clock className="w-4 h-4 text-gray-600" />
                <span className="text-gray-600 text-sm">{puzzleOfTheDay.avgTime}</span>
              </div>
              
              <div className="flex items-center gap-2">
                <Users className="w-4 h-4 text-gray-600" />
                <span className="text-gray-600 text-sm">{puzzleOfTheDay.completions.toLocaleString()} solved</span>
              </div>
              
              <div className="flex items-center gap-2">
                <Heart className="w-4 h-4 text-gray-600" />
                <span className="text-gray-600 text-sm">{puzzleOfTheDay.wantsToSolve.toLocaleString()} want to solve</span>
              </div>
            </div>

            {/* Tags */}
            {puzzleOfTheDay.tags.length > 0 && (
              <div className="mb-6">
                <div className="flex flex-wrap gap-2">
                  {puzzleOfTheDay.tags.map((tag) => (
                    <span 
                      key={tag} 
                      className="px-2 py-1 bg-gray-100 text-gray-600 text-xs font-medium rounded-full"
                    >
                      #{tag.toLowerCase()}
                    </span>
                  ))}
                </div>
              </div>
            )}

            {/* Action Buttons */}
            <div className="grid grid-cols-2 gap-3">
              {user ? (
                <>
                  {/* Add to List Dropdown */}
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button 
                        className="bg-purple-600 hover:bg-purple-700 text-white flex items-center justify-center gap-2 h-12 font-medium rounded-xl"
                        disabled={isUpdating}
                      >
                        {isUpdating ? (
                          <>
                            <Clock className="w-4 h-4 animate-spin" />
                            Updating...
                          </>
                        ) : puzzleStatus.hasLog && getStatusInfo(puzzleStatus.status) ? (
                          <>
                            {(() => {
                              const StatusIcon = getStatusInfo(puzzleStatus.status)?.icon || Plus;
                              return <StatusIcon className="w-4 h-4" />;
                            })()}
                            {getStatusInfo(puzzleStatus.status)?.label || 'Add to List'}
                          </>
                        ) : (
                          <>
                            <Plus className="w-4 h-4" />
                            Add to List
                          </>
                        )}
                        <ChevronDown className="w-4 h-4" />
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent align="start" className="w-48">
                      <DropdownMenuItem 
                        onClick={() => handleStatusChange('wishlist')}
                        className={puzzleStatus.status === 'wishlist' ? 'bg-accent' : ''}
                      >
                        <Heart className="w-4 h-4 mr-2" />
                        Add to Wishlist
                        {puzzleStatus.status === 'wishlist' && <Check className="w-4 h-4 ml-auto" />}
                      </DropdownMenuItem>
                      <DropdownMenuItem 
                        onClick={() => handleStatusChange('library')}
                        className={puzzleStatus.status === 'library' ? 'bg-accent' : ''}
                      >
                        <BookOpen className="w-4 h-4 mr-2" />
                        Add to Library
                        {puzzleStatus.status === 'library' && <Check className="w-4 h-4 ml-auto" />}
                      </DropdownMenuItem>
                      <DropdownMenuItem 
                        onClick={() => handleStatusChange('in-progress')}
                        className={puzzleStatus.status === 'in-progress' ? 'bg-accent' : ''}
                      >
                        <Clock className="w-4 h-4 mr-2" />
                        Currently Solving
                        {puzzleStatus.status === 'in-progress' && <Check className="w-4 h-4 ml-auto" />}
                      </DropdownMenuItem>
                      <DropdownMenuItem 
                        onClick={() => handleStatusChange('completed')}
                        className={puzzleStatus.status === 'completed' ? 'bg-accent' : ''}
                      >
                        <Check className="w-4 h-4 mr-2" />
                        Mark as Completed
                        {puzzleStatus.status === 'completed' && <Check className="w-4 h-4 ml-auto" />}
                      </DropdownMenuItem>
                      <DropdownMenuSeparator />
                      <DropdownMenuItem asChild>
                        <Link href={`/puzzles/${puzzleOfTheDay.id}`} className="w-full">
                          <Eye className="w-4 h-4 mr-2" />
                          View Details
                        </Link>
                      </DropdownMenuItem>
                    </DropdownMenuContent>
                  </DropdownMenu>

                  {/* Rate It Button */}
                  <Button 
                    variant="outline" 
                    className="border-emerald-200 text-emerald-700 hover:bg-emerald-50 flex items-center justify-center gap-2 h-12 font-medium rounded-xl"
                    asChild
                  >
                    <Link href={`/puzzles/${puzzleOfTheDay.id}`}>
                      <Star className="w-4 h-4" />
                      Rate It
                    </Link>
                  </Button>
                </>
              ) : (
                <>
                  {/* Login required state */}
                  <Button 
                    className="bg-purple-600 hover:bg-purple-700 text-white flex items-center justify-center gap-2 h-12 font-medium rounded-xl"
                    asChild
                  >
                    <Link href={`/puzzles/${puzzleOfTheDay.id}`}>
                      <Plus className="w-4 h-4" />
                      Add to List
                    </Link>
                  </Button>
                  <Button 
                    variant="outline" 
                    className="border-emerald-200 text-emerald-700 hover:bg-emerald-50 flex items-center justify-center gap-2 h-12 font-medium rounded-xl"
                    asChild
                  >
                    <Link href={`/puzzles/${puzzleOfTheDay.id}`}>
                      <Star className="w-4 h-4" />
                      Rate It
                    </Link>
                  </Button>
                </>
              )}
            </div>
          </div>
        </div>
      </div>
    </section>
  )
}
