# Goodreads for Jigsaw Puzzles - Optimized Cursor Rules

## Project Context
This is a social platform for jigsaw puzzle enthusiasts built with Next.js 14 App Router, TypeScript, Tailwind CSS, shadcn/ui, Supabase (PostgreSQL + Storage), Clerk authentication, and OpenAI integration. 

Key features: puzzle discovery, user-generated content, puzzle logging with media uploads, brand browsing, AI-powered recommendations, social activity feeds, and community features.

## Architecture Guidelines
- **Full-stack Next.js 14** with App Router (frontend + backend in one project)
- **API routes** in `src/app/api/` for backend functionality
- **Page components** in `src/app/` following App Router conventions
- **Reusable components** in `src/components/` organized by feature
- **Database interactions** via Supabase client in `src/lib/`
- **Type safety** with TypeScript throughout

## Code Quality Standards
- Use TypeScript for all new code with strict type checking
- Prefer descriptive names over comments
- Keep functions focused and under 50 lines
- Components should be under 200 lines (split if larger)
- Use early returns to reduce nesting depth
- Handle loading, error, and success states explicitly
- Implement proper error boundaries for robustness

## React/Next.js Best Practices
- **Server Components by default** - only add 'use client' when needed
- Use functional components with hooks exclusively
- Destructure props at component start for clarity
- Create custom hooks for reusable stateful logic
- Leverage Next.js optimizations (Image, Link, metadata, etc.)
- Use Suspense boundaries for loading states
- Implement proper SEO with metadata API

## Database & API Integration
- Use Supabase client for all database operations
- Implement proper TypeScript types for database entities
- Use optimistic updates for better UX (lists, logs, uploads)
- Handle offline scenarios gracefully
- Implement proper pagination for large datasets
- Validate data on both client and server sides
- Use proper error handling for API calls

## UI/UX Excellence
- **Mobile-first responsive design** using Tailwind breakpoints
- Use shadcn/ui components as foundation, customize as needed
- Maintain consistent spacing with Tailwind scale
- Ensure 44px minimum tap targets for mobile accessibility
- Include meaningful loading states and error feedback
- Use semantic HTML for better accessibility
- Implement proper WCAG AA contrast ratios
- Create engaging empty states with helpful CTAs

## Puzzle App Specific Features
- **Dual homepage CTAs**: "Find Your Next Puzzle" + "Log Your Puzzle"
- **Brand-first navigation**: Make manufacturer browsing prominent
- **Rich media handling**: Photos/videos in logs and activity feeds
- **Smart lists**: Trending, most solved, brand collections
- **Social features**: Following, activity feeds, puzzle stats
- **AI integration**: Chat-based discovery and recommendations
- **Review metadata**: Fit quality, false fits, pick test results
- **Community stats**: Solve counts, average times, user galleries

## Media & File Management
- Use Supabase Storage for all user-uploaded content
- Implement proper file validation (size, type, resolution)
- Provide upload progress indicators and error handling
- Support drag-and-drop and mobile file selection
- Optimize images for different display contexts
- Handle media privacy settings appropriately
- Create responsive image galleries and lightboxes

## Performance Optimization
- Optimize images with Next.js Image component
- Use React.lazy() for code splitting large components
- Implement proper caching strategies for API calls
- Minimize bundle size with tree shaking
- Use loading skeletons that match actual content
- Implement infinite scrolling for large lists
- Debounce search inputs and expensive operations

## Security & Privacy
- Validate and sanitize all user inputs
- Use environment variables for sensitive data
- Implement proper authentication checks
- Handle user permissions and roles correctly
- Never expose sensitive data in client code
- Use HTTPS for all production environments
- Implement rate limiting for API endpoints

## File Organization
- Use kebab-case for all file names
- Group related components in feature folders
- Export components from index files for clean imports
- Co-locate related files (component + types + hooks)
- Use absolute imports with @ alias consistently
- Keep utility functions in dedicated files

## Component Architecture
```
src/components/
├── ui/              ← shadcn/ui components
├── puzzle/          ← PuzzleCard, PuzzleDetail, PuzzleGrid
├── brands/          ← BrandBrowser, BrandCard, BrandProfile
├── lists/           ← ListManager, ListCard, SmartLists
├── media/           ← ImageUpload, VideoPlayer, Gallery
├── chat/            ← AIChat, ChatInterface
├── profile/         ← UserProfile, ActivityFeed
├── auth/            ← LoginForm, SignupFlow
└── layout/          ← Navigation, Header, Footer
```

## Error Handling Strategy
- Wrap async operations in try-catch blocks
- Provide meaningful error messages to users
- Implement graceful fallbacks for failed operations
- Use React Error Boundaries for component crashes
- Log errors properly without exposing sensitive data
- Create user-friendly error pages (404, 500, etc.)

## Testing Approach
- Write unit tests for utility functions
- Test API endpoints with proper mocking
- Use React Testing Library for component tests
- Implement integration tests for critical user flows
- Test responsive design across different screen sizes
- Validate accessibility with automated tools

## Accessibility Standards
- Use proper ARIA labels and roles
- Ensure keyboard navigation works everywhere
- Provide alt text for all images and media
- Maintain proper heading hierarchy
- Use semantic HTML elements appropriately
- Test with screen readers regularly
- Implement proper focus management

## State Management
- Use React's built-in state for component-level state
- Implement Context API for app-wide state when needed
- Use React Query/SWR for server state management
- Keep state as close to where it's used as possible
- Implement proper loading and error states
- Use optimistic updates for better perceived performance

## API Design Principles
- Follow RESTful conventions for API endpoints
- Use proper HTTP methods (GET, POST, PATCH, DELETE)
- Implement consistent error response formats
- Use proper status codes (200, 201, 400, 401, 404, 500)
- Include proper request/response typing
- Implement rate limiting and authentication middleware

## Development Workflow
- Use Git with meaningful commit messages
- Create feature branches for new functionality
- Implement proper code review process
- Use TypeScript strict mode throughout
- Run ESLint and Prettier for code consistency
- Test functionality before committing
- Document complex business logic

## Documentation Standards
- Include JSDoc comments for public functions
- Maintain up-to-date README with setup instructions
- Document API endpoints with examples
- Keep component props documented
- Update documentation when changing functionality
- Include troubleshooting guides for common issues

# Tailwind CSS Guidelines for Cursor
- ONLY use Tailwind classes that exist in the current build
- Use cn() utility for conditional classes: cn("base-class", condition && "conditional-class")
- Prefer semantic color variables: bg-background, text-foreground, border-border
- Use shadcn/ui color system: primary, secondary, muted, accent
- For responsive design: mobile-first with sm:, md:, lg:, xl: prefixes
- Common spacing: p-4, p-6, p-8 (avoid arbitrary values like p-[20px])
- Use flexbox utilities: flex, items-center, justify-between, gap-4
- For grids: grid, grid-cols-1, md:grid-cols-2, lg:grid-cols-3
- Animations: animate-fade-in, transition-all, duration-200, ease-in-out
- Never use custom CSS classes unless absolutely necessary
- If styles don't work, check if the class exists in Tailwind docs
- Use the cn() utility from @/lib/utils for all className combinations

# Next.js Development Guidelines
- Always stop the dev server before making config changes
- Never modify next.config.js, tailwind.config.ts, and package.json simultaneously
- After package installations, always restart the dev server
- Use 'npm run fresh' when experiencing cache issues
- Disable Turbopack in development to prevent cache corruption
- Test builds regularly with 'npm run build'

# CRITICAL: Authentication with Clerk + Supabase
- Always use users.clerk_id to link Clerk authentication to your users table
- Never use Supabase auth fields (encrypted_password, email_confirmed_at, etc.)
- Get current user: auth().userId (Clerk) → supabase.from('users').eq('clerk_id', userId)
- All user queries MUST use clerk_id, not email or other fields

# Database Schema Rules
- ALWAYS refer to docs/supabase-schema.md for exact column names
- photo_urls and video_urls are JSONB arrays (not single text fields)
- Always filter puzzles by approval_status = 'approved' for public display
- Use puzzle_aggregates table for statistics, never compute live
- puzzle_logs.status has specific values: want-to-do/in-progress/completed/abandoned
- All UUIDs use uuid_generate_v4() default
- All tables have created_at with now() default

# Goodreads for Puzzles - Design System Cursor Rules

## Core Architecture & Stack
- **Framework**: Next.js 14 App Router with TypeScript
- **Styling**: Tailwind CSS + shadcn/ui components
- **Database**: Supabase (PostgreSQL + Storage)
- **Auth**: Clerk authentication with Supabase user sync
- **AI**: OpenAI integration for recommendations

## Design System Fundamentals

### Component Structure
```tsx
// ALWAYS use this pattern for new components
'use client' // Only when needed (interactions, hooks)

import { Card, CardContent } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
// ... other ui imports

export function ComponentName() {
  return (
    <div className="space-y-4"> {/* Use space-y-* for vertical spacing */}
      <Card className="glass-card border border-white/40 overflow-hidden">
        <CardContent className="p-0"> {/* Remove default padding */}
          <div className="grid md:grid-cols-2 gap-0"> {/* Responsive grid */}
            {/* Content */}
          </div>
        </CardContent>
      </Card>
    </div>
  )
}
```

### Layout Patterns
- **Container**: `space-y-4` for vertical sections
- **Card Layout**: Always use `Card` + `CardContent` with `glass-card` class
- **Grid**: `grid md:grid-cols-2 gap-0` for side-by-side layouts
- **Content Padding**: `p-8` for main content areas
- **Flex Layout**: `flex flex-col justify-center space-y-6` for content sections

### Color & Styling System
```css
/* Primary Gradients */
.btn-primary { @apply bg-gradient-to-r from-violet-500 to-purple-600 hover:from-violet-600 hover:to-purple-700 text-white shadow-lg shadow-violet-500/25; }

/* Secondary Buttons */
.btn-secondary { @apply border-emerald-200 text-emerald-700 hover:bg-emerald-50 hover:border-emerald-300 bg-transparent; }

/* Glass Cards */
.glass-card { @apply backdrop-blur-sm bg-white/80 border border-white/40; }

/* Badges */
.badge-difficulty { @apply bg-violet-100 text-violet-700 border-violet-200; }
.badge-accent { @apply bg-amber-500 text-white border-0 shadow-lg; }
```

### Typography Hierarchy
- **Main Headings**: `text-2xl font-bold text-slate-800`
- **Section Headings**: `text-lg font-semibold text-slate-800`
- **Body Text**: `text-slate-700 leading-relaxed`
- **Secondary Text**: `text-slate-600 font-medium`
- **Muted Text**: `text-slate-500 text-sm`

### Interactive Elements

#### Button Patterns
```tsx
// Primary Action Button
<Button className="flex-1 bg-gradient-to-r from-violet-500 to-purple-600 hover:from-violet-600 hover:to-purple-700 text-white shadow-lg shadow-violet-500/25">
  <Plus className="h-4 w-4 mr-2" />
  Add to List
</Button>

// Secondary Action Button  
<Button variant="outline" className="flex-1 border-emerald-200 text-emerald-700 hover:bg-emerald-50 hover:border-emerald-300 bg-transparent">
  <Star className="h-4 w-4 mr-2" />
  Rate It
</Button>
```

#### Dropdown Pattern
```tsx
<DropdownMenu>
  <DropdownMenuTrigger asChild>
    <Button className="[primary-button-classes]">
      <Plus className="h-4 w-4 mr-2" />
      Add to List
      <ChevronDown className="h-4 w-4 ml-2" />
    </Button>
  </DropdownMenuTrigger>
  <DropdownMenuContent align="start" className="w-48">
    <DropdownMenuItem onClick={() => handleAction('status')}>
      <Icon className="w-4 h-4 mr-2" />
      Action Label
    </DropdownMenuItem>
  </DropdownMenuContent>
</DropdownMenu>
```

### Data Display Patterns

#### Stats Grid (2x2)
```tsx
<div className="grid grid-cols-2 gap-4">
  <div className="flex items-center space-x-2">
    <Star className="h-4 w-4 fill-amber-400 text-amber-400" />
    <span className="text-sm font-semibold text-slate-700">
      {rating} ({reviewCount})
    </span>
  </div>
  {/* More stats */}
</div>
```

#### Tags Display
```tsx
<div className="flex flex-wrap gap-2">
  {tags.map((tag) => (
    <Badge key={tag} variant="secondary" className="text-xs bg-slate-100 text-slate-600">
      #{tag}
    </Badge>
  ))}
</div>
```

### Authentication Integration
```tsx
// Always check user state
const { user } = useUser()

// For authenticated vs non-authenticated UI
{user ? (
  <AuthenticatedContent />
) : (
  <PublicContent />
)}

// For status tracking
const [puzzleStatus, setPuzzleStatus] = useState<{hasLog: boolean, status?: string}>({ hasLog: false })
```

### Image Handling
```tsx
// For cards with images
<div className="relative">
  <img 
    src={imageUrl || "/placeholder-puzzle.svg"}
    alt={title}
    className="w-full h-80 md:h-full object-cover"
  />
  <div className="absolute inset-0 bg-gradient-to-t from-black/30 via-transparent to-transparent" />
  <Badge className="absolute top-4 left-4 bg-amber-500 text-white border-0 shadow-lg">
    Badge Text
  </Badge>
</div>
```

### Loading & Error States
```tsx
// Loading State
if (isLoading) {
  return (
    <div className="space-y-4">
      <Card className="glass-card border border-white/40 overflow-hidden">
        <CardContent className="p-0">
          <div className="grid md:grid-cols-2 gap-0">
            <div className="w-full h-80 md:h-full bg-slate-200 animate-pulse" />
            <div className="p-8 flex flex-col justify-center space-y-6">
              <div className="space-y-3">
                <div className="h-6 bg-slate-200 rounded animate-pulse" />
                <div className="h-4 bg-slate-200 rounded animate-pulse w-3/4" />
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}
```

### Responsive Design Rules
- **Mobile First**: Always start with mobile layout
- **Breakpoints**: Use `md:` for tablet, `lg:` for desktop
- **Grid**: `grid md:grid-cols-2` for side-by-side layouts
- **Spacing**: Consistent `space-y-*` and `gap-*` values
- **Text**: Responsive text with `text-lg md:text-xl` when needed
### Never Do This
- ❌ Custom CSS classes (use Tailwind only)
- ❌ Inline styles
- ❌ Non-responsive layouts
- ❌ Missing loading/error states
- ❌ Direct database queries in components
- ❌ Hardcoded colors (use design tokens)
- ❌ Missing TypeScript types
- ❌ Components over 200 lines

### Always Do This
- ✅ Use established component patterns
- ✅ Follow the grid system (space-y-*, grid md:grid-cols-2)
- ✅ Include proper TypeScript types
- ✅ Add loading and error states
- ✅ Use glass-card styling for cards
- ✅ Follow button gradient patterns
- ✅ Include accessibility attributes
- ✅ Use proper icon sizing (h-4 w-4 for buttons)
- ✅ Test responsive behavior

Remember: Refer to the documents in /docs folder for detailed requirements, user flows, database schema, and technical specifications. Always prioritize user experience and maintain code quality standards.